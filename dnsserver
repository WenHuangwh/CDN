#!/usr/bin/env python3
import argparse
import socket
from dnslib import DNSRecord, DNSHeader, QTYPE, A, RR
import time
import subprocess
import threading

class ReplicaManager:
    def __init__(self, replica_servers):
        self.replica_servers = replica_servers
        self.client_replica_map = {}

    def measure_latency(self, client_ip, server):
        ip = socket.gethostbyname(server)
        result = subprocess.run(
            ["scamper", "-c", f"ping -c 1 -s {client_ip}", "-i", ip],
            stdout=subprocess.PIPE,
            text=True
        )

        lines = result.stdout.splitlines()
        for line in lines:
            if line.startswith("icmp_seq=0"):
                latency = float(line.split()[-2])
                return latency
        return float('inf')

    def get_best_replica(self, client_ip):
        if client_ip not in self.client_replica_map:
            latencies = {
                server: self.measure_latency(client_ip, server) for server in self.replica_servers
            }
            best_replica = min(latencies, key=latencies.get)
            self.client_replica_map[client_ip] = best_replica
        return self.client_replica_map[client_ip]

class DNSServer:
    def __init__(self, port, cdn_name, replica_manager):
        self.port = port
        self.cdn_name = cdn_name
        self.replica_manager = replica_manager
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.sock.bind(("", self.port))

    def handle_query(self, query, client_addr):
        response = query.reply()
        qtype = QTYPE[query.q.qtype]
        query_name = str(query.q.qname).rstrip('.')
        root_server_ip = "198.41.0.4"

        if qtype == "A" and query_name.startswith(self.cdn_name):
            client_ip = client_addr[0]
            best_replica = self.replica_manager.get_best_replica(client_ip)
            best_replica_ip = socket.gethostbyname(best_replica)
            answer = RR(query.q.qname, QTYPE.A, rdata=A(best_replica_ip), ttl=3600)
        else:
            answer = RR(query.q.qname, QTYPE.A, rdata=A(root_server_ip), ttl=3600)

        response.add_answer(answer)
        return response

    def run(self):
        while True:
            data, addr = self.sock.recvfrom(1024)
            query = DNSRecord.parse(data)
            response = self.handle_query(query, addr)
            self.sock.sendto(response.pack(), addr)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--port', required=True, help="Port number to bind the DNS server")
    parser.add_argument('-n', '--name', required=True, help="CDN-specific name that your server translates to an IP")
    args = parser.parse_args()

    port = int(args.port)
    cdn_name = args.name

    replica_servers =[
        "cdn-http1.5700.network",
        "cdn-http2.5700.network",
        "cdn-http3.5700.network",
        "cdn-http4.5700.network",
        "cdn-http5.5700.network",
        "cdn-http6.5700.network",
        "cdn-http7.5700.network",
    ]

    replica_manager = ReplicaManager(replica_servers)
    dns_server = DNSServer(port, cdn_name, replica_manager)
    dns_server.run()

if __name__ == "__main__":
    main()
