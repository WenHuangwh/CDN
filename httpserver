#!/usr/bin/env python3
import http.server
import socketserver
import urllib.request
from collections import OrderedDict

class LRUCache:
    def __init__(self, capacity):
        self.cache = OrderedDict()
        self.capacity = capacity

    def get(self, key):
        if key in self.cache:
            self.cache.move_to_end(key)
            return self.cache[key]
        return None

    def put(self, key, value):
        if key in self.cache:
            self.cache.move_to_end(key)
        self.cache[key] = value
        if len(self.cache) > self.capacity:
            self.cache.popitem(last=False)


class MyHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    cache = LRUCache(capacity=100)

    def do_GET(self):
        if self.path == "/grading/beacon":
            self.send_response(204)
            self.end_headers()
            return

        cached_content = self.cache.get(self.path)
        if cached_content:
            self.send_response(200)
            self.send_header("Content-Type", "text/html")
            self.send_header("Content-Length", len(cached_content))
            self.end_headers()
            self.wfile.write(cached_content)
        else:
            self.fetch_from_origin_and_cache()

    def fetch_from_origin_and_cache(self):
        origin_url = f"http://cs5700cdnorigin.ccs.neu.edu:8080{self.path}"
        try:
            with urllib.request.urlopen(origin_url) as response:
                content = response.read()
                self.cache.put(self.path, content)

                self.send_response(response.status)
                self.send_header("Content-Type", response.headers["Content-Type"])
                self.send_header("Content-Length", len(content))
                self.end_headers()
                self.wfile.write(content)
        except urllib.error.HTTPError as e:
            self.send_error(e.code, e.reason)
        except urllib.error.URLError as e:
            self.send_error(500, "Failed to fetch content from origin server")

if __name__ == "__main__":
    with socketserver.TCPServer(("", YOUR_PORT), MyHTTPRequestHandler) as httpd:
        httpd.serve_forever()
